#%RAML 1.0
title: The LoRa Core Server API
version: 0.9.0
baseUri: https://api.lora.telenor.io/
securedBy: [apiToken]
description: |
    This is the LoRa Core Server API. The API uses an API token in the header
    that must be set for every call.
# ------------------------------------------------------------------------------
# API token schema
#
securitySchemes:
  apiToken:
    description: |
        In order to access the API you'll need an API key. You can create keys
        in the LoRa Core Server console.
    type: Pass Through
    describedBy:
      headers:
        X-API-Token:
          description: |
              Set the `X-API-Token` header on your request to authenticate your
              client. Remember to store the key in a safe spot!
          type: string
          required: true

traits:
# ------------------------------------------------------------------------------
# Status codes
#
    serverError:
        responses:
            500:
                description: |
                    The server encountered an internal server error and could
                    not complete the request.
                body:
                    text/plain:
                        description: Error message
                        type: string
    postBadRequest:
        responses:
            400:
                description: |
                    One or more of the fields in the object is mssing or
                    incorrectly formatted in the POSTed object.
                body:
                    text/plain:
                        description: Error message
                        type: string
    invalidEUI:
        responses:
            400:
                description: |
                    The EUI for the << resourcePathName|!lowercase >>
                    isn't formattted correctly.
                body:
                    text/plain:
                        description: Error message
                        type: string
    notFound:
        responses:
            404:
                description: The << resourcePathName >> does not exist
                body:
                    text/plain:
                        description: Error message
                        type: string

    tokenSessionRequired:
        responses:
            401:
                description: |
                    Access denied. The token resource requires a valid CONNECT
                    ID session.
                body:
                    text/plain:
                        description: |
                            CONNECT ID session is required to access the resource.
                        type: string

resourceTypes:
    tagCollection:
        description: |
            Tags provide a convenient way to tag <<typeName|!pluralize>> with custom
            metadata. Each tag name in the collection must be unique and the tag
            collection is a map of name-value entries.
            Tag names and values can only contain the characters A-Z,
            a-z, 0-9, space, underscore, minus, plus, colon and the equals sign.

        get:
            description: Get the collection of tags for the <<typeName>>.
            responses:
                200:
                    body:
                        application/json:
                            type: TagCollection
            is: [ serverError ]

        post:
            description: |
                Create a new tag for the application. More than one tag can be created
                at once.
            responses:
                200:
                    body:
                        application/json:
                            type: TagCollection
            is: [ serverError, postBadRequest ]

    tagElement:
        uriParameters:
            Name:
                type: string
                required: true
                description: The name of the tag.
        get:
            description: Get the value of the tag.
            responses:
                200:
                    description: Return the value of the tag.
                    body:
                        text/plain:
                            type: string

            is: [ notFound, serverError ]
        delete:
            description: Remove the tag from the <<typeName|!pluralize>> collection of tags.
            responses:
                204:
                    description: Tag has been removed.
            is: [ notFound, serverError ]
# ------------------------------------------------------------------------------
# Types
#
types:
    Application:
        description: An application.
        properties:
            applicationEUI:
                description: |
                    The application EUI. This is an EUI-64 formatted as eight
                    hexadecimal bytes.
                type: string
                required: false
                pattern: XX-XX-XX-XX-XX-XX-XX-XX
            networkEUI:
                description: The network EUI. This is an EUI-64.
                type: string
                required: false

    ApplicationList:
        description: A list of applications.
        properties:
            applications:
                description: List of applications
                type: Application[]
            template:
                type: TemplateCollection

    Device:
        description: Device information.
        properties:
            deviceEUI:
                description: |
                    Device EUI. This is an EUI-64 string. If it is omitted when
                    creating a new device the an EUI will be automatically
                    assigned to the device.
                pattern: XX-XX-XX-XX-XX-XX-XX-XX
                type: string
                required: false
            devAddr:
                description: |
                    The device address. This is a 32-bit integer formatted as a
                    hex number. If it is omitted when creating a new device a
                    device address will be automatically assigned to the new
                    device.
                pattern: XXXXXXXX
                type: string
                required: false
            appKey:
                description: |
                    The application key. This is an AES-128 key formatted as a
                    hex string with 16 bytes. Spaces in the key are ignored. This
                    key is only used by OTAA devices and can be omitted for ABP
                    devices. If you omit the key when creating a new device a
                    new key will be generated automatically.
                type: string
                required: false
                pattern: XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX
            appSKey:
                description: |
                    The application session key (AES-128). If you are using OTAA devices
                    the session key will be generated when the device joins
                    the network. If you create an ABP device and omit the application
                    session key a new key will be automatically created. Spaces
                    in the key are ignored.
                pattern: XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX
                type: string
                required: false
            nwkSKey:
                description: |
                    The network session key (AES-128). If you are using OTAA
                    devices the network session key will be generated when the
                    device joins the network. If you omit the key when you
                    create ABP devices a new key will be automatically generated.
                type: string
                required: false
            fCntUp:
                description: |
                    The frame counter for upstream frames (ie frames from the
                    device to the server). This field is ignored when you
                    create a new device.
                type: integer
                required: false
            fCntDn:
                description: |
                    The downstream frame counter, ie. frames from the server
                    to the device. This field is ignored when you create a new
                    device.
                type: integer
                required: false
            relaxedCounter:
                description: |
                    Relaxed frame counter checks. If this is set to `true` the
                    server will ignore frames that have mismatches in frame
                    counters. The default for this is `true`. Devices running
                    in a production environment should have this value set to
                    `false` to minimize the risk of replay attacks.
                type: boolean
                required: false
            deviceType:
                description: |
                    The device type (`OTAA` or `ABP`). OTAA (Over The Air
                    Activated) devices negotiates their applicaiton and session
                    key when they join the network while ABP (Activation By
                    Personalisation) have their session keys set on the device.
                type: string
                required: false
                default: OTAA
                enum:
                    - OTAA
                    - ABP

    DeviceDataList:
        description: A list of device data.
        properties:
            messages:
                description: List of messages
                type: DeviceData[]

    DeviceData:
      description: |
        Data received from a device.
      properties:
          devAddr:
            description: |
                The Device Address of the device that sent the data.
            type: string
            required: true
          timestamp:
            description: |
                The time the data was received by the server. The time stamp is
                an unix time stamp (a 32-bit signed integer)
            type: integer
            required: true
          data:
            description: |
                The unencrypted data sent by the device. The data is represented
                as a string of hex encoded bytes.
            type: string
            required: true
          appEUI:
            description: |
                The application EUI of the application the device is registered to.
            type: string
            pattern: XX-XX-XX-XX-XX-XX-XX-XX
          deviceEUI:
            description: |
                The device EUI of the device that sent the data.
            type: string
            pattern: XX-XX-XX-XX-XX-XX-XX-XX
          rssi:
            description: |
                The Relative Signal Strength Indicator for the transmission. This
                is an signed integer that shows the signal strengt. A typical
                RSSI is between -20 (very good) and -130 (very weak).
            type: integer
          snr:
            description: |
                The Signal to Noise Ratio of the transmission. Higher numbers are
                better.
            type: number
          frequency:
            description: |
                The frequency the device used when it sent the data. This is a
                floating point number. Value is in Hz.
            type: number
          gatewayEUI:
            description: |
                The EUI of the gateway that received the message from the device.
            pattern: XX-XX-XX-XX-XX-XX-XX-XX
            type: string
          dataRate:
            description: |
                The spread factor and bandwidth the device used when it sent the
                message.
            type: string

    DeviceMessage:
      description: A message to be sent to a device.
      properties:
          deviceEUI:
            description: The device EUI. This field is ignored when you send a message.
            type: string
            pattern: XX-XX-XX-XX-XX-XX-XX-XX
            required: false
          appEUI:
            description: |
                The application EUI for the device. This field is ignored
                when you send a message.
            type: string
            pattern: XX-XX-XX-XX-XX-XX-XX-XX
            required: false
          data:
            description: |
                The data to send. The data is encoded as a hex string representing
                a byte array.
            type: string
            required: true
          port:
            description: |
                The port to use when sending the message. The port can be any
                integer in the range 1-223, inclusive. Port 0 is reserved for
                network messages and ports 224 and up are reserved for future
                use.
            type: integer
            required: true
          ack:
            description: |
                Request acknowledgement from the device. If this field is set
                the server will retransmit the message until the device replies
                with an acknowledgement message.
            type: boolean
            required: false
            default: false

    DeviceList:
        description: A list of devices.
        properties:
            devices:
                description: List of devices
                type: Device[]
            templates:
                type: TemplateCollection

    TemplateCollection:
        type: object
        description: A map with a collection of URI templates

    Gateway:
        description: A gateway.
        properties:
            gatewayEUI:
                description: The gateway's EUI. Each gateway have an unique EUI assigned.
                type: string
                pattern: XX-XX-XX-XX-XX-XX-XX-XX
                required: true
            ip:
                description: The gateway's IP address. This is a required field.
                type: string
                required: true
            strictIP:
                description: |
                    Do strict IP address check on packets from the gateway. It
                    is highly recommended to set this to `true` since it is
                    relatively easy to spoof the IP address in UDP packets.
                type: boolean
                required: false
            latitude:
                description: |
                    Gateways usually have a GPS receiver to indicate their
                    position but you can set this position manually by setting
                    the latitude, longitude and altitude. Value is in radians, north is positive.
                type: number
                required: false
            longitude:
                description: |
                    The longitude part of the position. Value is in radians, east is positive.
                type: number
                required: false
            altitude:
                description: |
                    The altitude part of the position. Value is in meters.
                type: number
                required: false

    GatewayList:
        properties:
            gateways: Gateway[]
            templates: TemplateCollection

    Token:
        properties:
            Token:
                description: The token. This field is automatically generated.
                type: string
                required: false
            Resource:
                description: |
                    The resource path the token applies to. Access is limited to
                    the path described in this field; if the resource the client
                    tries to access starts with the token's Resource filed access
                    will be granted; `/` applies to *all* resources and
                    `/applications` applies to *all* applications while
                    `/applications/01-02-03-04-05-06-07-08` only applies
                    to the application with the EUI `01-02-03-04-05-06-07-08`.
                type: string
                required: true
            Write:
                description: |
                    Read/write flag. The defult setting for this field is `false`.
                    If the write flag is set to true the client will be able to
                    modify any resource matching the `Resource` field.
                type: boolean
                required: false
                default: false
    TokenList:
        description: A list of tokens
        properties:
            Tokens: Token[]
    TagCollection:
        description: A map of name-value entries


# ------------------------------------------------------------------------------
# Applications
#

/applications:
    get:
        displayName: Application list
        description: List your applications.
        responses:
            200:
                description: Application found
                body:
                    application/json:
                        type: ApplicationList
        is: [ invalidEUI, serverError ]

    post:
        displayName: Create application
        description: Create a new application
        responses:
            201:
                description: |
                    Application is created. The created application is
                    returned in the body.
                body:
                    application/json:
                      type: Application
        is: [ serverError , postBadRequest ]

    /{ApplicationEUI}:
        uriParameters:
            ApplicationEUI:
                type: string
                required: true
        get:
            displayName: Application
            description: Show application information
            responses:
                200:
                    description: |
                        Application found. The application is returned
                        in the body of the response.
                    body:
                        application/json:
                          type: Application
            is: [ invalidEUI , serverError, notFound ]
        delete:
            displayName: Remove application
            description: Remove application
            responses:
                204:
                    description: Application is removed
                409:
                    description: |
                        Application with devices can't be removed.
                    body:
                        text/plain:
                            description: Error message
                            type: string
            is: [ invalidEUI, serverError, notFound ]

        /tags:
            type: { tagCollection: { "typeName": "Application" } }

            /{Name}:
                type: { tagElement: { "typeName": "Application" } }
        /data:
            get:
                displayName: Application data
                description: |
                    Retrieve the data sent by the devices associated
                    with the application.
                responses:
                    200:
                        description: Device data for application
                        body:
                            application/json:
                              type: DeviceDataList
                is: [ notFound, invalidEUI, serverError ]


        /stream:
            get:
                displayName: Live data stream
                description: |
                    Get a live data stream with data from the devices
                    associated with the application.
                responses:
                    101:
                        description: |
                            WebSocket successfully created. The server
                            will emit JSON structs with device data
                            whenever data is received from one of the
                            devices. Empty keepalive structs with the
                            `KeepAlive` flag set to `true` are emitted
                            if no data is received for 30 seconds.
                        body:
                            application/json:
                                type: DeviceData

                is: [ notFound, invalidEUI, serverError ]


# ------------------------------------------------------------------------------
# Devices
#

        /devices:
            get:
                displayName: Device list
                description: List the devices in the application
                responses:
                    200:
                        description: Device list
                        body:
                            application/json:
                              type: DeviceList
                is: [ invalidEUI, serverError, notFound ]
            post:
                displayName: Create device
                description: Create a new device
                responses:
                    201:
                        description: |
                            Device created. The new device is returned
                            in the body of the response.
                        body:
                            application/json:
                              type: Device
                is: [ serverError, postBadRequest, notFound ]
                body:
                    application/json:
                      type: Device

            /{DeviceEUI}:
                uriParameters:
                    DeviceEUI:
                        type: string
                        required: true
                get:
                    displayName: Device
                    description: Show device information
                    responses:
                        200:
                            body:
                                application/json:
                                  type: Device
                    is: [ notFound, invalidEUI, serverError ]
                delete:
                    displayName: Remove device
                    description: |
                        Remove the device. Note that this will also
                        remove all of the device data that has been
                        received.
                    responses:
                        204:
                            description: Device has been removed.
                    is: [ notFound, postBadRequest, serverError ]

                /tags:
                    type: { tagCollection: { "typeName": "Device" } }

                    /{Name}:
                        type: { tagElement: { "typeName": "Device" } }
                /data:
                    get:
                        displayName: Device data
                        description: Show the data sent by the device
                        queryParameters:
                            limit:
                                required: false
                                default: 50
                                type: integer
                                description: |
                                    The number of elements to retrieve.
                                    The default is 50. The elements are
                                    ordered based on timestamp; newest
                                    elements are displayed first.
                        responses:
                            200:
                                description: Device data
                                body:
                                    application/json:
                                      type: DeviceDataList
                        is: [ notFound, invalidEUI, serverError ]

                /message:
                    post:
                        displayName: Send message
                        description: |
                            Send a message to the device.
                        responses:
                            201:
                                description: |
                                    Data is scheduled to be sent. Once
                                    the device connects to the gateway
                                    the message will be sent to the device.
                        is: [ notFound, postBadRequest, serverError ]

                        body:
                            application/json:
                              type: DeviceMessage
                /source:
                    get:
                        displayName: Device configuration
                        description: |
                            Get device configuration. The device
                            configuration can be used to provision the
                            device.
                        responses:
                            200:
                                body:
                                    text/plain:
                                        description: Source code snippet that can be copied and pasted.
                                        type: string
                        is: [ notFound, invalidEUI, serverError ]

# ------------------------------------------------------------------------------
# Gateways
#
/gateways:
    get:
        displayName: Gateway list
        description: |
            List your gateways.
        responses:
            200:
                body:
                    application/json:
                      type: GatewayList
        is: [ serverError ]

    post:
        displayName: Create gateway
        description: |
            Create a new gateway.
        responses:
            201:
                body:
                    application/json:
                      type: Gateway
                      description: The newly created gateway.
        is: [ postBadRequest, serverError ]
        body:
            application/json:
              type: Gateway


    /{GatewayEUI}:
        displayName: Gateway
        uriParameters:
            GatewayEUI:
                type: string
                required: true
        get:
            displayName: Gateway
            description: |
                Get gateway information.
            responses:
                200:
                    body:
                        application/json:
                            type: Gateway
            is: [ serverError, invalidEUI, notFound ]
        delete:
            displayName: Remove gateway
            description: |
                Remove the gateway. This won't affect any of the data received
                by the gateway but - not surprisingly - the core server won't
                process any data from the gateway when it is removed.
            responses:
                204:
                    description: The gateway has been removed.
            is: [ serverError, invalidEUI, notFound ]
        /tags:
            type: { tagCollection: { "typeName": "Gateway" } }

            /{Name}:
                type: { tagElement: { "typeName": "Gateway" } }

# ------------------------------------------------------------------------------
# Tokens
#
/tokens:
    get:
        displayName: List tokens
        description: List the API tokens you have created.
        responses:
            200:
                description: Get list of tokens.
                body:
                    application/json:
                        type: TokenList
        is: [ serverError, tokenSessionRequired ]

    post:
        displayName: Create token
        description: Create a new token
        responses:
            201:
                description: Token is created.
                body:
                    application/json:
                        type: Token
        is: [ serverError, postBadRequest, tokenSessionRequired ]

    /{Token}:
        uriParameters:
            Token: 
                description: The token
                type: string
                required: true
        get:
            displayName: Show token
            description: Show token information
            responses:
                200:
                    body:
                        application/json:
                            type: Token
            is: [ serverError, notFound, tokenSessionRequired ]

        delete:
            displayName: Remove token
            description: Remove the token from the token list
            responses:
                204:
                    description: Token is removed.
            is: [ serverError, notFound, tokenSessionRequired ]

# ------------------------------------------------------------------------------
# Telenor CONNECT ID
#
/connect:
    /login:
        get:
            displayName: CONNECT ID login
            description: |
                Start a Telenor CONNECT login roundtrip. When the login is completed
                (or aborted) the browser will be redirected to the start page.
            responses:
                303:
                    body:
                        text/html:                            
                            type: string
                    description: Redirect to login page
            is: [ serverError ]

    /logout:
        get:
            displayName: CONNECT ID logout
            description: |
                Start logout roundtrip. The user's browser will be redirected to the
                main page when he/she is logged out.
            responses:
                303:
                    body:
                        text/html:
                            type: string
                    description: Redirect to logout page
        is: [ serverError ]

    /profile:
        get:
            displayName: CONNECT ID profile
            description: |
                Show CONNECT ID profile information. The information is
            responses:
                200:
                    body:
                        application/json:
                            description: |
                                The returned JSON object contains the CONNECT
                                session information.
                            type: object
                            example: |
                                {
                                    "connect_id": "<connect id user id>",
                                    "name": "John Doe",
                                    "locale": "en-us",
                                    "email": "john@example.com",
                                    "verified_email": true,
                                    "phone": "",
                                    "verified_phone": false
                                }

                    description:
                        The profile structure.
                401:
                    body:
                        text/plain:
                            description: User isn't authenticated.
                            type: string
